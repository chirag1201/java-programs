#include <stdio.h>
#define MAX 3
void depth_first_search(int adj[][MAX],int visited[],int start);
void breadth_first_search(int adj[][MAX],int visited[],int start)

{
	 int queue[MAX],rear = -1,front =-1, i;
queue[++rear] = start;
visited[start] = 1;
while(rear != front)
{
 start = queue[++front];
 if(start == 4)
 printf("5\t");
 else
 printf("%c \t",start + 65);
		 for(i = 0; i < MAX; i++)
 {
			 if(adj[start][i] == 1 && visited[i] == 0)
 {
 queue[++rear] = i;
visited[i] = 1;
 }
 }
}
}
int main()
{
	int choice;
	 int visited[MAX] = {0};
	 int adj[MAX][MAX], i, j;
	clrscr();
	printf("\n Enter the adjacency matrix: ");
	 for(i = 0; i < MAX; i++)
		 for(j = 0; j < MAX; j++)
 scanf("%d", &adj[i][j]);

printf("\n###MENU###");
printf("\n1.BFS");
printf("\n2.DFS");
printf("\nEnter 3 to exit");
do
{
printf("\nEnter your choice");
scanf("%d",&choice);
switch(choice)
{
case 1:
printf("\n BFS traversal:");
breadth_first_search(adj,visited,0);
	 break;
case 2:
printf("\n DFS traversal:");
depth_first_search(adj,visited,0);

break;
}
}while(choice!=3);
return 0;
}
void depth_first_search(int adj[][MAX],int visited[],int start)
{
	 int stack[MAX];
int top = -1, i;
printf("%c",start + 65);
visited[start] = 1;
stack[++top] = start;
while(top!=-1)
{
 start=stack[top];
		 for(i = 0; i < MAX; i++)
 {
	 if(adj[start][i] && visited[i] == 0)
 {
 stack[++top] = i;
printf("%c->", i + 65);
visited[i] = 1;
break;
 }
 }
		 if(i == MAX)
 top--;
}
}
/* ***********OUTPUT***********

 Enter the adjacency matrix: 1011
1000
1002
1004
1212
2324
4545
2326
2325

###MENU###
1.BFS
2.DFS
Enter 3 to exit
Enter your choice:1

 BFS traversal:A
Enter your choice:2

 DFS traversal:AB->C->
Enter your choice:3
*/



